<?php 
	/**********************************************************
	 **** File generated by fitzlucassen\DALGenerator tool ****
	 * All right reserved to fitzlucassen repository on github*
	 ************* https://github.com/fitzlucassen ************
	 **********************************************************/
	namespace fitzlucassen\FLFramework\Data\Repository;

	use fitzlucassen\FLFramework\Library\Core;
	use fitzlucassen\FLFramework\Data\Entity;
	use fitzlucassen\FLFramework\Data\Base\Entity as EntityBase;
	use fitzlucassen\FLFramework\Data\Base\Repository as RepositoryBase;

	class UserRepository extends RepositoryBase\UserRepositoryBase {
		public function __construct($pdo, $lang) {
			parent::__construct($pdo, $lang);
		}

		public function activate($id, $active) {
			$query = $this->_queryBuilder
				->update("user", array('isActive' => $active))
				->where(array(array("link" => "", "left" => "id", "operator" => "=", "right" => (int)$id )))
				->getQuery();
			try {
				return $this->_pdo->Query($query);
			}
			catch(PDOException $e){
				print $e->getMessage();
			}
			return array();
		}

		public function createPassword($id, $password) {
			$query = $this->_queryBuilder->update("user", array('password' => $password))
			->where(array(array("link" => "", "left" => "id", "operator" => "=", "right" => (int)$id )))
			->getQuery();
			try {
				return $this->_pdo->Query($query);
			}
			catch(PDOException $e){
				print $e->getMessage();
			}
		}
		
		public function add($properties) {
			$query = $this->_queryBuilder->insert("user", array('isCompany' => $properties["isCompany"], 'companyName' => $properties["companyName"], 'companySiret' => $properties["companySiret"], 'firstname' => $properties["firstname"], 'lastname' => $properties["lastname"], 'phoneNumber' => $properties["phoneNumber"], 'email' => $properties["email"], 'address' => $properties["address"], 'zipcode' => $properties["zipcode"], 'city' => $properties["city"], 'isActive' => $properties["isActive"], 'fromCompany' => $properties["fromCompany"], 'creationDate' => $properties["creationDate"]))->getQuery();
			try {
				return $this->_pdo->Query($query);
			}
			catch(\PDOException $e){
				print $e->getMessage();
			}
			return array();
		}
		
		public function update($id, $properties) {
			$array = [
				'isCompany' => $properties["isCompany"], 
				'companyName' => $properties["companyName"], 
				'companySiret' => $properties["companySiret"], 
				'firstname' => $properties["firstname"], 
				'lastname' => $properties["lastname"], 
				'phoneNumber' => $properties["phoneNumber"], 
				'email' => $properties["email"], 
				'address' => $properties["address"], 
				'zipcode' => $properties["zipcode"], 
				'city' => $properties["city"], 
				'isActive' => $properties["isActive"], 
				'fromCompany' => $properties["fromCompany"], 
				'creationDate' => $properties["creationDate"]
			];

			if(isset($properties["password"]))
				$array["password"] = $properties["password"];

			$query = $this->_queryBuilder
				->update("user", $array)
				->where(array(array("link" => "", "left" => "id", "operator" => "=", "right" => $id )))
				->getQuery();
			try {
				return $this->_pdo->Query($query);
			}
			catch(PDOException $e){
				print $e->getMessage();
			}
			return array();
		}

		public static function getAll($Connection) {
			$qb = new Core\QueryBuilder(true);
			$query = $qb->select()->from(array("user"))->orderBy(['creationDate DESC'])->getQuery();
			try {
				$result = $Connection->selectTable($query);
				$array = array();
				foreach ($result as $object){
					$o = new Entity\User();
					$o->fillObject($object);
					$array[] = $o;
				}
				return $array;
			}
			catch(PDOException $e){
				print $e->getMessage();
			}
			return array();
		}
	}
