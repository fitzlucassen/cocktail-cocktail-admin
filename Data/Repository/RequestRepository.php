<?php

/**********************************************************
 **** File generated by fitzlucassen\DALGenerator tool ****
 * All right reserved to fitzlucassen repository on github*
 ************* https://github.com/fitzlucassen ************
 **********************************************************/

namespace fitzlucassen\FLFramework\Data\Repository;

use fitzlucassen\FLFramework\Library\Core;
use fitzlucassen\FLFramework\Data\Entity;
use fitzlucassen\FLFramework\Data\Base\Entity as EntityBase;
use fitzlucassen\FLFramework\Data\Base\Repository as RepositoryBase;

class RequestRepository extends RepositoryBase\RequestRepositoryBase
{
	public function __construct($pdo, $lang)
	{
		parent::__construct($pdo, $lang);
	}

	public static function getAll($Connection)
	{
		$qb = new Core\QueryBuilder(true);
		$query = $qb->select()->from(array("request"))->orderBy(['creationDate DESC'])->getQuery();
		try {
			$result = $Connection->selectTable($query);
			$array = array();
			foreach ($result as $object) {
				$o = new Entity\Request();
				$o->fillObject($object);
				$array[] = $o;
			}
			return $array;
		} catch (PDOException $e) {
			print $e->getMessage();
		}
		return array();
	}

	public function addUserId($id, $userId)
	{
		$query = $this->_queryBuilder->update("request", array('id_User' => $userId))->where(array(array("link" => "", "left" => "id", "operator" => "=", "right" => $id)))->getQuery();
		try {
			return $this->_pdo->Query($query);
		} catch (\PDOException $e) {
			print $e->getMessage();
		}
		return array();
	}

	
	public function processed($id, $active) {
		$query = $this->_queryBuilder
			->update("request", array('isProcessed' => $active))
			->where(array(array("link" => "", "left" => "id", "operator" => "=", "right" => (int)$id )))
			->getQuery();
		try {
			return $this->_pdo->Query($query);
		}
		catch(\PDOException $e){
			print $e->getMessage();
		}
		return array();
	}
}
